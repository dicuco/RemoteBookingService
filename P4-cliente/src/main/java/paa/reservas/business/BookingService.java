package paa.reservas.business;

import paa.reservas.model.Hotel;
import paa.reservas.model.Booking;

import java.time.LocalDate;
import java.util.List;

/**
 * Service interface for the hotel booking system.
 */
public interface BookingService {
    /**
     * Registers a new hotel in the system.
     *
     * <p>
     * This method will create a new hotel and insert it into the database, provided that all the received parameters
     * meet their specification and the following rules are also observed:
     * </p>
     * <ul>
     *     <li>
     *         The hotel does not need to have both single and double rooms, but it does need to have rooms, so the
     *         parameters {@code doubleRooms} and {@code singleRooms} cannot both be zero.
     *     </li>
     *     <li>
     *         All double rooms in the hotel must be numbered with consecutive numbers starting from
     *         {@link #MINIMUM_DOUBLE_ROOM_NUMBER} and not higher than {@link #MAXIMUM_DOUBLE_ROOM_NUMBER}, which limits the
     *         <b>maximum</b> admissible value for the parameter {@code doubleRooms}. A hotel can, however, have
     *         fewer rooms than the maximum.
     *     </li>
     *     <li>
     *         All single rooms in the hotel must be numbered with consecutive numbers starting from
     *         {@link #MINIMUM_SINGLE_ROOM_NUMBER} and not higher than {@link #MAXIMUM_SINGLE_ROOM_NUMBER}, which limits the
     *         <b>maximum</b> admissible value for the parameter {@code singleRooms}. A hotel can, however, have
     *         fewer rooms than the maximum.
     *     </li>
     * </ul>
     * <p>
     * If any parameter is not correct or one of these rules is not satisfied, this method shall throw a
     * {@code BookingServiceException} <b>with an informative message detailing the cause(s) of the failure</b>.
     * </p>
     *
     * @param name name of the hotel. Must not be null or blank.
     * @param address address of the hotel. Must not be null or blank.
     * @param stars category of the hotel. Must range between 0 (no stars) and 5.
     * @param longitude geographical longitude coordinate of the hotel. Must be in the interval [-180, 180].
     * @param latitude geographical latitude coordinate of the hotel. Must be in the interval [-90, 90].
     * @param doubleRooms number of double rooms in this hotel. Read above for more restrictions.
     * @param singleRooms number of single rooms in this hotel. Read above for more restrictions.
     * @return a new Hotel object with an autogenerated primary key.
     * @throws BookingServiceException if any of the parameters do not conform to the specification.
     */
    Hotel createHotel(String name, String address, int stars, double longitude, double latitude, int doubleRooms, int singleRooms) throws BookingServiceException;

    /**
     * Gets a hotel by its unique identifier code
     *
     * @param hotelCode hotel code to look for
     * @return the Hotel object with specified code or {@code null} if such hotel does not exist.
     * @throws BookingServiceException 
     */
    Hotel findHotel(Long hotelCode);

    /**
     * Gets a list of all hotels in the database.
     * @return list of all hotels
     */
    List<Hotel> findAllHotels();

    /**
     * Computes the number of double rooms that are occupied on a specified date in a particular hotel
     *
     * @param hotelCode hotel to check occupancy in. Must not be null.
     * @param date date to check occupancy on. Must not be null.
     * @return number of occupied rooms
     * @throws BookingServiceException if a parameter is null or the hotel does not exist.
     */
    int occupiedDoubleRooms(Long hotelCode, LocalDate date) throws BookingServiceException;

    /**
     * Computes the number of single rooms that are occupied on a specified date in a particular hotel
     *
     * @param hotelCode hotel to check occupancy in. Must not be null.
     * @param date date to check occupancy on. Must not be null.
     * @return number of occupied rooms
     * @throws BookingServiceException if a parameter is null or the hotel does not exist.
     */
    int occupiedSingleRooms(Long hotelCode, LocalDate date) throws BookingServiceException;

    /**
     * Books a room in a hotel for a specified number of people, for a specified period of time.
     *
     * <p>
     * This method will create a new Booking object and insert it into the database, provided that all the received
     * parameters meet their specification and the following rules are also observed:
     * </p>
     * <ul>
     *     <li>
     *         The requested stay must not be longer than {@link #MAXIMUM_STAY_LENGTH} nights.
     *     </li>
     *     <li>
     *         The hotel must have enough rooms to accommodate the booking. In particular, this means that the new
     *         Booking object needs to assign a room number that is not already occupied by another booking, this is,
     *         no other booking can have the same room number and partially or totally overlap the requested period.
     *         Obviously, the assigned room must also exist in that particular hotel.
     *     </li>
     *     <li>
     *         Bookings for two people must always be assigned a double room, if available. If no double rooms are
     *         available, the booking must be refused. However, bookings for one person will be assigned a single room
     *         if one is available, and a double room otherwise. Therefore, a booking for one person will only be
     *         refused if no rooms are available at all.
     *     </li>
     *     <li>
     *         The booking must be made for a date that is not in the past with respect to the date of the operation.
     *     </li>
     * </ul>
     * <p>
     * If any parameter is not correct or one of these rules is not satisfied, this method shall throw a
     * {@code BookingServiceException} <b>with an informative message detailing the cause(s) of the failure</b>.
     * </p>
     *
     * @param hotelCode code of the hotel to make the booking at. Must not be null and must correspond to an existing hotel.
     * @param numberOfPeople number of people to book for. Must be either 1 or 2.
     * @param travellerName name of the person booking. Must not be null or blank.
     * @param arrivalDate date of arrival. Must not be null.
     * @param departureDate date of departure. Must not be null and must be strictly after the arrival date.
     * @param operationDate date of the operation. Must not be null.
     * @return a new Booking object with an autogenerated primary key.
     * @throws BookingServiceException if any of the parameters do not conform to the specification.
     */
    Booking makeBooking(Long hotelCode, int numberOfPeople, String travellerName, LocalDate arrivalDate, LocalDate departureDate, LocalDate operationDate) throws BookingServiceException;

    /**
     * Cancels a booking by its unique identifier code, deleting it from the database.
     *
     * <p>
     *     This method will look in the database for the booking with the specified code and, if found, delete it,
     *     However, the cancellation will be only allowed if the arrival date of the booking is at least one day after
     *     the date of the operation; if this condition is not met, the cancellation will be refused and the booking
     *     will remain in the database. If the booking is not found or the date of the operation is not valid, this method
     *     shall throw a {@code BookingServiceException} <b>with an informative message detailing the cause(s) of the
     *     failure</b>.
     * </p>
     *
     * @param bookingCode booking code to look for. Must not be null and must correspond to an existing booking.
     * @param operationDate date of the operation. Must not be null.
     * @throws BookingServiceException if any of the parameters do not conform to the specification.
     */
    void cancelBooking(Long bookingCode, LocalDate operationDate) throws BookingServiceException;

    /** Lowest number of a single room at any hotel */
    int MINIMUM_SINGLE_ROOM_NUMBER = 100;

    /** Highest possible number of a single room at any hotel */
    int MAXIMUM_SINGLE_ROOM_NUMBER = 199;

    /** Lowest number of a double room at any hotel */
    int MINIMUM_DOUBLE_ROOM_NUMBER = 200;

    /** Highest possible number of a double room at any hotel */
    int MAXIMUM_DOUBLE_ROOM_NUMBER = 299;

    /** Maximum number of nights of any stay */
    int MAXIMUM_STAY_LENGTH = 30;
}
